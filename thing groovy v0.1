/**
 *  My Pi Handler
 *
 *  Copyright 2018 stuart oldfield
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "My Pi Handler", namespace: "Switchdoctorstu", author: "stuart oldfield") {
		capability "Switch"
        command "red"
		command "blue"
		command "green"
        command "yellow"
	}

// when setting up your device via the smartthings app, these preference settings are available
    preferences {
        // the LAN IP address and port for the server for example: 192.168.0.37:8080
        input("host", "string", title:"Host", description: "The IP address and port of the Raspberry Pi.", required: true, displayDuringSetup: true)
	}

	simulator {
		// TODO: define status and reply messages here
	}

	tiles(scale:2) {
		multiAttributeTile(name:"controllerstatus", type: "generic", width: 6, height: 4) {
			tileAttribute ("device.status", key: "PRIMARY_CONTROL") {
           		attributeState("online", label:'${name}', icon:"st.Home.home9", backgroundColor:"#79b821")
 			}
		}
 		standardTile("red", "device.button", width: 2, height: 2) {
			state "default", label: "Red", backgroundColor: "#ffffff", action: "red", icon:""
		}
 		standardTile("blue", "device.button", width: 2, height: 2) {
			state "default", label: "Blue", backgroundColor: "#ffffff", action: "blue", icon:""
		}
		standardTile("green", "device.button", width: 2, height: 2) {
			state "default", label: "Green", backgroundColor: "#ffffff", action: "green", icon:""
		}
        standardTile("yellow", "device.button", width: 2, height: 2) {
			state "default", label: "Yellow", backgroundColor: "#ffffff", action: "yellow", icon:""
		}
		
		details(["controllerstatus","red","blue","green","yellow"])
	}
}

// parse events into attributes
def parse(String description) {
	log.debug "Parsing '${description}'"
	// TODO: handle 'switch' attribute

}

// handle commands
def on() {
	log.debug "Executing 'on'"
	// TODO: handle 'on' command
    def cmds = []
	cmds << http_command("/pi/thing?on")
    log.debug cmds
	// sendEvent(name: "on", value: "pushed", data: [buttonNumber: "1"], descriptionText: "$device.displayName on button was pushed", isStateChange: true)
	return cmds
}

def off() {
	log.debug "Executing 'off'"
	// TODO: handle 'off' command
    def cmds = []
	cmds << http_command("/pi/thing?off")
    log.debug cmds
	// sendEvent(name: "off", value: "pushed", data: [buttonNumber: "3"], descriptionText: "$device.displayName off button was pushed", isStateChange: true)
	return cmds
}

def getHostAddress() {    
	return "192.168.0.37:8080"
	// return "${host}"
}

//
def red() {
	def cmds = []
	cmds << http_command("/pi/thing?red")
    log.debug cmds
	sendEvent(name: "red", value: "pushed", data: [buttonNumber: "1"], descriptionText: "$device.displayName red button was pushed", isStateChange: true)
    return cmds
}

//
def blue() {
   	def cmds = []
	cmds << http_command("/pi/thing?blue")
    log.debug cmds
	sendEvent(name: "blue", value: "pushed", data: [buttonNumber: "2"], descriptionText: "$device.displayName blue button was pushed", isStateChange: true)
	return cmds
}

//
def green() {
   	def cmds = []
	cmds << http_command("/pi/thing?green")
    log.debug cmds
	sendEvent(name: "green", value: "pushed", data: [buttonNumber: "3"], descriptionText: "$device.displayName green button was pushed", isStateChange: true)
	return cmds
}
//
def yellow() {
   	def cmds = []
	cmds << http_command("/pi/thing?yellow")
    log.debug cmds
	sendEvent(name: "yellow", value: "pushed", data: [buttonNumber: "4"], descriptionText: "$device.displayName yellow button was pushed", isStateChange: true)
	return cmds
}

// 
private http_command(uri) {
	log.debug("Executing hubaction ${uri} on " + getHostAddress())

    def hubAction = new physicalgraph.device.HubAction(
    	method: "GET",
        path: uri,
        headers: [HOST:getHostAddress()])

    return hubAction
}
